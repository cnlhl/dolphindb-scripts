/*
feature_gen 格式：
def feature_gen(transtb,ordertb,depthtb){
    ****
    return result
}
result为两列表，第一列为时间（频率与horizen一致）：列名为MerketTime；第二列为feature：列名为feature；
*/


def feature_gen(transtb,ordertb,depthtb) {
    interval_ms = 3 * 1000
    three_group = <(floor(TransactionTime$INT / interval_ms) * interval_ms)$TIME>
    afterAuction = <TransactionTime >= 09:30:00.000>
    limitOrderOnly = <OrderType = 0>
    buyOrderOnly = <BSFlag = "B">
    sellOrderOnly = <BSFlag = "S">
    t1 = sql(
      select=(sqlCol("*"), sqlColAlias(three_group, "three")),
      from=ordertb, where=afterAuction
    )
    eval(t1)
    t2 = sql(
      select=sqlCol(`Price`BSFlag`Volume`three`OrderType),
      from=t1,
      where=[limitOrderOnly, sellOrderOnly]
    )
    t2 = eval(t2)
    t3 = select t2.*, depthtb.Close, max((t2.Price / depthtb.Close - 1), -0.2) as diff from t2 inner join depthtb on t2.three=depthtb.DepthMarketTime where t2.Price < depthtb.Close
    t4 = select three, wavg(diff, Volume) as feature from t3 group by three
    result = select three as MarketTime, feature from t4
    print(result)
    return result
  }


def each_return(time0,time1){
    return (time1/time0-1)
}

def return_gen(transtb,target_date,target_stock,horizen){
    tb = select last(Price)as Price from transtb group by interval(TransactionTime,horizen,"prev") as MarketTime
    update tb set stock_return = eachPost(each_return,Price,Price[-1])
    return tb
}

def R_gen(return_tb,feature_tb, method){
    t = select * from feature_tb left join return_tb on feature_tb.MarketTime = return_tb.MarketTime 
    if(method == "UP"){
        ct = select * from t where stock_return>=0
    }else if(method == "DOWN"){
        ct = select * from t where stock_return<0
    }else{
        ct = t
    }
    res = ols(ct.stock_return,ct.feature,1,2)
    return res["RegressionStat"]["statistics"][0]
}

def R_square_gen(target_stock, string_date ,horizen, method = "ALL"){
    target_date = temporalParse(string_date,"yyyyMMdd")
    depthtb = loadTable("dfs://history","depthBook")
    ordertb = loadTable("dfs://history","orderBook")
    transtb = loadTable("dfs://history","transBook")
    depth_d = select * from depthtb where Date = target_date and StockCode = target_stock
    trans_d = select * from transtb where Date = target_date and StockCode = target_stock and CancelFlag = "F"
    order_d = select * from ordertb where Date = target_date and StockCode = target_stock
    return_tb = return_gen(trans_d,target_date,target_stock,duration(horizen))
    feature_tb = feature_gen(trans_d,order_d,depth_d)
    return R_gen(return_tb,feature_tb,method)
}

R = R_square_gen("000002","20220307","3s","ALL")
print(R)