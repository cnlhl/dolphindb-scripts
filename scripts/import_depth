login("admin","123456")

def judge_empty(CSV_file_path){
	s = file(CSV_file_path)
   	len = s.seek(0,TAIL)
   	if(len==1) 
		return true
	return false
}

def getSchema(csv){
	schema1=extractTextSchema(csv)
	update schema1 set type = "SYMBOL" where name="stockcode"
	update schema1 set type = "STRING" where name="DepthMarketTime"
	update schema1 set type = "STRING" where name="HostTime"
	//update schema1 set name=`Amount where name="TotalAmount" 
	return schema1
   }

def string2time(mutable t){
	DepthMarketTime =temporalParse(lpad((exec DepthMarketTime from t),9,"0"),"HHmmssSSS")
	HostTime =temporalParse(lpad((exec HostTime from t),9,"0"),"HHmmssSSS")
	t.replaceColumn!(`HostTime,HostTime)
	t.replaceColumn!(`DepthMarketTime,DepthMarketTime)
    return t
    }

def createTB_in_DB(dbName,tableName){  
	db=database(directory=dbName);
	if(existsTable(dbName,tableName))
		dropTable(db,tableName)
	columns =`Date`stockcode`DepthMarketTime`Status`PreClose`Open`High`Low`Close`AskPrice1`AskPrice2`AskPrice3`AskPrice4`AskPrice5`AskPrice6`AskPrice7`AskPrice8`AskPrice9`AskPrice10`AskVol1`AskVol2`AskVol3`AskVol4`AskVol5`AskVol6`AskVol7`AskVol8`AskVol9`AskVol10`BidPrice1`BidPrice2`BidPrice3`BidPrice4`BidPrice5`BidPrice6`BidPrice7`BidPrice8`BidPrice9`BidPrice10`BidVol1`BidVol2`BidVol3`BidVol4`BidVol5`BidVol6`BidVol7`BidVol8`BidVol9`BidVol10`Trades`Volume`Turnover`TotalBidVol`TotalAskVol`WeightedAvgBidPrice`WeightedAvgAskPrice`HighLimit`LowLimit`HostTime
	type=[DATE,SYMBOL,TIME,INT,FLOAT,FLOAT,FLOAT,FLOAT,FLOAT,FLOAT,FLOAT,FLOAT,FLOAT,FLOAT,FLOAT,FLOAT,FLOAT,FLOAT,FLOAT,INT,INT,INT,INT,INT,INT,INT,INT,INT,INT,FLOAT,FLOAT,FLOAT,FLOAT,FLOAT,FLOAT,FLOAT,FLOAT,FLOAT,FLOAT,INT,INT,INT,INT,INT,INT,INT,INT,INT,INT,INT,INT,DOUBLE,INT,INT,FLOAT,FLOAT,FLOAT,FLOAT,TIME]

	orderData = table(1:0, columns,type)
	db.createPartitionedTable(orderData, tableName,`Date`stockcode)
   }

def readAllCSV(filepath, stock_date){
	filelist = files(filepath)
	for(f in filelist){
		CSV_file_path = filepath + f[`filename]
		//print(CSV_file_path)
		//print(stock_date)
		if(judge_empty(CSV_file_path))
			continue
		schema1=getSchema(CSV_file_path)
		t = loadText(CSV_file_path,,schema1)
		t = string2time(t)
		targettable = loadTable("dfs://history","depthBook")
		addColumn(t,["Date", "stockcode"],[DATE,SYMBOL])
		update t set stockcode = strReplace(f[`filename],".csv","");
		update t set Date = stock_date
		reorderColumns!(t,`Date`stockcode`DepthMarketTime`Status`PreClose`Open`High`Low`Close`AskPrice1`AskPrice2`AskPrice3`AskPrice4`AskPrice5`AskPrice6`AskPrice7`AskPrice8`AskPrice9`AskPrice10`AskVol1`AskVol2`AskVol3`AskVol4`AskVol5`AskVol6`AskVol7`AskVol8`AskVol9`AskVol10`BidPrice1`BidPrice2`BidPrice3`BidPrice4`BidPrice5`BidPrice6`BidPrice7`BidPrice8`BidPrice9`BidPrice10`BidVol1`BidVol2`BidVol3`BidVol4`BidVol5`BidVol6`BidVol7`BidVol8`BidVol9`BidVol10`Trades`Volume`Turnover`TotalBidVol`TotalAskVol`WeightedAvgBidPrice`WeightedAvgAskPrice`HighLimit`LowLimit`HostTime)
		//print(t)
		targettable.append!(t)
		}
	}
	def readDateFile(filepath,fname){
		date_file_path = filepath + fname + "/"
		//print(date_file_path)
		filename2date = temporalParse(fname,"yyyyMMdd")
		startdate = date(2022.01.01)
		enddate = date(2022.01.31)
		if(filename2date>= startdate and filename2date<= enddate){
			print(fname)
			readAllCSV(date_file_path, filename2date)
		}
	}
	
	def loop_readDateFile(filepath,filenames){
		loop(readDateFile{filepath,},filenames)
	}
	
	def submit_readDateFile(filepath){
		filelist = files(filepath)
		parallalLevel = 10;
		//to be finished
		print(typestr(filelist))
		print(size(filelist))
		filenames = exec filename from filelist
		for(f in filenames.cut(size(filelist)/parallalLevel))
			submitJob("loadTransData", "loadData",loop_readDateFile,filepath,f)
	}


dbName = "dfs://history"
tableName = "depthBook"
createTB_in_DB(dbName,tableName)
tb = loadTable(dbName,tableName)
filepath = "/mnt/ProductData/Level2CSV/depth/"
submit_readDateFile(filepath);
