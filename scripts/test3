def create_bid_TB_in_DB(dbName,tableName){  
	db=database(directory=dbName);
	if(existsTable(dbName,tableName))
		dropTable(db,tableName)
	columns =`Date`stockcode`BidOrderSeqNo`OrderType`TransactionTime`DepthMarketTime`Price`BidPrice1
	type=[DATE,SYMBOL,INT,INT,TIME,TIME,DOUBLE,FLOAT]
	orderData = table(1:0, columns,type)
	db.createPartitionedTable(table=orderData, tableName=tableName, partitionColumns=`Date`stockcode, sortColumns=`Date, keepDuplicates=ALL, sortKeyMappingFunction=[hashBucket{,5}])
   }

def create_ask_TB_in_DB(dbName,tableName){  
	db=database(directory=dbName);
	if(existsTable(dbName,tableName))
		dropTable(db,tableName)
	columns =`Date`stockcode`AskOrderSeqNo`OrderType`TransactionTime`DepthMarketTime`Price`AskPrice1
	type=[DATE,SYMBOL,INT,INT,TIME,TIME,DOUBLE,FLOAT]
	orderData = table(1:0, columns,type)
	db.createPartitionedTable(table=orderData, tableName=tableName, partitionColumns=`Date`stockcode, sortColumns=`Date, keepDuplicates=ALL, sortKeyMappingFunction=[hashBucket{,5}])
   }

dbName = "dfs://history"
trans_tableName = "transBook"
order_tableName = "orderBook"
depth_tableName = "depthBook"
load_tableName_B = "Bcanceled"
load_tableName_S = "Scanceled"

create_bid_TB_in_DB(dbName,load_tableName_B)
create_ask_TB_in_DB(dbName,load_tableName_S)

tbB = loadTable(dbName,load_tableName_B)
tbS = loadTable(dbName,load_tableName_S)

tb1 = loadTable(dbName,order_tableName)
tb2 = loadTable(dbName,trans_tableName)
tb3 = loadTable(dbName,depth_tableName)

//select * from tb3 where DepthMarketTime = 09:15:00.000 and Date = 2022.09.01 and stockcode = "000004"

//select * from tbB

d = 2022.10.14
target_stock = "000001"
    //empty_judgy
    if(size(select * from tb2 where Date = d limit 1)==0)
        continue
    //select canceled order
	tb_B_cancel = select Date,stockcode,BidOrderSeqNo,TransactionTime,time(second(TransactionTime)-second(TransactionTime)%3) as DepthMarketTime from tb2 where CancelFlag = "C" and BSFlag = "B" and Date = d and stockcode = target_stock	
	tb_S_cancel = select Date,stockcode,AskOrderSeqNo,TransactionTime,time(second(TransactionTime)-second(TransactionTime)%3) as DepthMarketTime from tb2 where CancelFlag = "C" and BSFlag = "S" and Date = d and stockcode = target_stock
    //get order price
	tb_order = select * from tb1 where Date = d and stockcode = target_stock
	tb_B_cancel = select Date,stockcode,BidOrderSeqNo,OrderType,TransactionTime,DepthMarketTime,Price from tb_B_cancel left join tb_order on tb_B_cancel.BidOrderSeqNo = tb_order.SeqNo 
	tb_S_cancel = select Date,stockcode,AskOrderSeqNo,OrderType,TransactionTime,DepthMarketTime,Price from tb_S_cancel left join tb_order on tb_S_cancel.AskOrderSeqNo = tb_order.SeqNo 
	//get No.1 bider/asker
	tb_depth = select * from tb3 where Date = d and stockcode = target_stock
	tb_B_cancel = select Date,stockcode,BidOrderSeqNo,OrderType,TransactionTime,DepthMarketTime,Price,BidPrice1 from tb_B_cancel left semijoin tb_depth on tb_B_cancel.DepthMarketTime = tb_depth.DepthMarketTime //where tb_depth.DepthMarketTime = (select max(DepthMarketTime) from tb_depth)
	tb_S_cancel = select Date,stockcode,AskOrderSeqNo,OrderType,TransactionTime,DepthMarketTime,Price,AskPrice1 from tb_S_cancel left semijoin tb_depth on tb_S_cancel.DepthMarketTime = tb_depth.DepthMarketTime
    //clear void price and select the bid1/ask1 order canceled
 	equal_B = select * from tb_B_cancel where BidPrice1 != NULL and OrderType = 0 and Price >= BidPrice1 and TransactionTime >= 09:30:00.000
    equal_S = select * from tb_S_cancel where AskPrice1 != NULL and OrderType = 0 and Price >= AskPrice1 and TransactionTime >= 09:30:00.000
	//load result into table
	tbB.append!(equal_B)
	tbS.append!(equal_S)
select * from tbB